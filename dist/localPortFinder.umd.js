!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).localPortFinder={})}(this,(function(t){"use strict";const e=async(t,e)=>{const o=new AbortController,{signal:s}=o,n=new Promise(((s,n)=>{setTimeout((()=>{o.abort(),n(new Error(`Timeout exceeded for port ${t}.`))}),e)})),r=fetch(`http://localhost:${t}`,{method:"GET",signal:s});if(!(await Promise.race([r,n]).catch((t=>{throw t}))).ok)throw new Error(`Failed to connect to port ${t}.`);return t},o=async(t,o)=>{let s=null==o?void 0:o.logger;(!s||s&&"function"!=typeof s)&&(s=null);let n=null==o?void 0:o.timeout;n||(n=2e3);const r={status:!1,port:null,message:""};if(!t||0===t.length||isNaN(t[0]))return r.message="No ports provided.",r;try{const o=await(async(t,o,s)=>{for(const n of t){const t={port:n,status:!1,message:""},r=await e(n,s).catch((e=>{t.message=e.message}));if(void 0!==r&&(t.status=!0),o&&o(t),t.status)return r}return null})(t,s,n);return null===o?(r.message="No available port found.",r):(r.status=!0,r.port=o,r)}catch(a){return r.message=a.message,r}},s=[7070,7071,8080,8081];t.DEFAULT_PORTS=s,t.findFirst=o,t.findFirstDefault=async t=>await o(s,t),Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));